>>>> AGENTS.md
# Code Style

- Keep code simple, explicit, typed, test-driven, and ready for automation.
- Source files are UTF-8 but must contain only ASCII characters. Do not use smart quotes, ellipses, em-dashes, emoji, or other non-ASCII glyphs.
- Docstrings are a single unwrapped paragraph. Rely on your editor's soft-wrap.
- Prefer explicit over implicit constructs. No wildcard imports.

```python
from . import tmux  # instead of from .tmux import Pane
```

Always reference modules by their alias. Never use `from X import *`.

- Decorate every public function or class with `@beartype.beartype`.
- Use frozen `@dataclasses.dataclass` for data containers such as `Config` or `Args`.
- Classes use `CamelCase`, for example `Dataset` or `FeatureExtractor`.
- Functions and variables use `snake_case`, for example `download_split` or `md5_of_file`.
- Constants are `UPPER_SNAKE`, defined at module top, for example `URLS = {...}`.
- File descriptors end in `fd`, for example `log_fd`.
- File paths end in `_fpath`; directories end in `_dpath`.
- Constructors follow verb prefixes:
  - `make_...` returns an object.
  - `get_...` returns a primitive value such as a string or path.
  - `setup_...` performs side effects and returns nothing.

# Testing

- Use pytest with fixtures and parameterization.
- Use Hypothesis for property-based tests, especially in helpers.

## Command Runner

A `justfile` is provided only as convenient documentation.
Do **not** call `just` (the binary may be missing).
Instead:

1. Open `justfile`, locate the target you need.
2. Copy the shell lines that follow the target and execute them directly.

Example

```sh
# donâ€™t run
just test

# do run
uv run ruff format --preview .
uv run pytest --cov shhelp --cov-report term
```

>>>> README.md
# shhelp

shhelp is a tool for answering shell-related questions directly from the command line.

You can ask it how to do something in your shell, or for explanations of specific command-line options.

## Example Usage

### Problem solving

```sh
shh where is my OPENROUTER_API_KEY being set?
```

### Explanation

```sh
shh "can you explain what -a and -F are in tmux list-panes?"
```

```sh
shh whats the difference between os.environ.get and os.getenv in python
````

```sh
shh where do typical unix programs store REPL history on unix?
```

>>>> __init__.py

>>>> __main__.py
if __name__ == "__main__":
    from . import cli

    cli.main()

>>>> cli.py
import dataclasses
import json
import os
import pathlib
import sys
import typing

import beartype
import tyro

from . import config, tmux, tooling


@beartype.beartype
@dataclasses.dataclass(frozen=True)
class Context:
    active: tmux.Pane
    panes: tuple[tmux.Pane, ...]
    system: str
    shell: str
    aliases: tuple[str, ...]

    def __init__(self, shell: str | None = None):
        import subprocess

        active, panes = tmux.get_panes()
        system = subprocess.check_output(["uname", "-a"], text=True).strip()
        shell = shell or os.getenv("SHELL", "")

        # Get shell aliases
        aliases = ()
        try:
            # Run shell in interactive mode to get aliases
            alias_cmd = [shell, "-ic", "alias"]
            alias_output = subprocess.check_output(
                alias_cmd, text=True, stderr=subprocess.DEVNULL
            ).strip()
            if alias_output:
                aliases = tuple(alias_output.splitlines())
        except (subprocess.SubprocessError, FileNotFoundError):
            # Fallback if getting aliases fails
            pass

        object.__setattr__(self, "active", active)
        object.__setattr__(self, "panes", panes)
        object.__setattr__(self, "system", system)
        object.__setattr__(self, "shell", shell)
        object.__setattr__(self, "aliases", aliases)


@beartype.beartype
def cli(
    words: list[str],
    /,
    cfg: typing.Annotated[config.Config, tyro.conf.arg(name="")] = config.Config(),
    context: bool = True,
) -> int:
    """
    Ask an LLM for help with shell commands.

    Args:
        words: Your query.
    """
    cfg = config.load(cfg)

    import litellm

    if not litellm.supports_function_calling(cfg.model):
        print(f"Error: The model '{cfg.model}' does not support function calling.")
        print("Please choose a different model that supports this feature.")
        return 1

    query = " ".join(words)
    # Need templating
    from . import templating

    template = templating.Template(pathlib.Path(__file__).parent / "prompt.j2")
    ctx = Context()

    system = template.render(
        active_pane=ctx.active,
        panes=ctx.panes,
        system=ctx.system,
        shell=ctx.shell,
        aliases=ctx.aliases,
        context=context,
    )

    # Need llms
    from . import llms

    conversation = llms.Conversation(model=cfg.model, api_key=cfg.api_key)
    conversation.system(system)
    conversation.user(query)

    # Need ui.
    from . import ui

    while True:
        toks, usd = conversation.get_costs()
        if not ui.confirm_next_request(toks, usd):
            return 0

        msg = conversation.send(
            tools=tooling.get_tool_specs(),
        )

        # Print agent response.
        ui.echo(msg.content.strip())

        if not msg.tool_calls:
            # Print total session cost.
            return 0

        deny_notes = []
        for tc in msg.tool_calls:
            try:
                kwargs = json.loads(tc.function.arguments)
                tool = tooling.get_tool(tc.function.name)(**kwargs)
                if ui.confirm(f"Run tool {tc.function.name}: <cmd>{tool}</cmd>?"):
                    result = tool()
                    ui.echo(result)
                    conversation.tool(result, tool_call_id=tc.id)
                else:
                    note = ui.ask_tool_skip_reason(tc.function.name)
                    deny_notes.append(f"{tc.function.name}: {note}")
                    conversation.tool(f"denied by user: {note}", tool_call_id=tc.id)
            except Exception as err:
                conversation.tool(str(err), tool_call_id=tc.id)
                ui.echo(f"<warn>Error:</warn> {err}")

        if deny_notes:
            conversation.user("\n".join(deny_notes))


def main():
    sys.exit(tyro.cli(cli))

>>>> config.py
import dataclasses
import os
import pathlib
import tomllib

import beartype

_CFG_PATH = pathlib.Path("~/.config/shhelp/config.toml").expanduser()


@beartype.beartype
@dataclasses.dataclass(frozen=True)
class Config:
    """Runtime options that rarely change between invocations.

    Attributes:
        api_key: Secret for your LLM backend (OpenAI / Anthropic / etc.). Default None, which falls back to env var `SHHELP_API_KEY` or backend-specific vars like `OPENAI_API_KEY`.
        model: Identifier sent to the provider, e.g. ``gpt-4o-mini``.
        history_lines: How many lines of tmux scrollback to include in the prompt.
    """

    api_key: str = ""
    model: str = "gpt-4.1-mini"
    history_lines: int = 200  # reasonable default


@beartype.beartype
def _write_default_cfg() -> None:
    """Write default config to `~/.config/shhelp/config.toml`."""
    # TODO: include TOML comments with the parsed attribute comments from Config. We can adjust the comments to be under each variable instead of the docstring if that's easier.
    _CFG_PATH.parent.mkdir(parents=True, exist_ok=True)
    with _CFG_PATH.open("w") as fh:
        for k, v in dataclasses.asdict(Config()).items():
            fh.write(f"{k} = {v!r}\n")


@beartype.beartype
def load(cli: Config) -> Config:
    """Return a Config merged from TOML file + env vars + defaults + CLI options."""
    cfg_dict: dict = {}

    if not _CFG_PATH.exists():
        _write_default_cfg()

    cfg_dict.update(tomllib.loads(_CFG_PATH.read_text()))

    # Override with CLI options that differ from defaults
    default_cfg = Config()
    cli_dict = dataclasses.asdict(cli)
    for field_name, field_value in cli_dict.items():
        default_value = getattr(default_cfg, field_name)
        # Only override if the CLI value is not None and different from default
        if field_value is not None and field_value != default_value:
            cfg_dict[field_name] = field_value

    if env_key := os.getenv("SHHELP_API_KEY"):
        cfg_dict["api_key"] = env_key

    cfg = Config(**cfg_dict)

    return cfg

>>>> llms.py
import datetime
import os
import pathlib

import beartype
import litellm

_LOG_BASE = pathlib.Path(
    os.getenv("SHHELP_LOGDIR", "~/.local/state/shhelp/logs")
).expanduser()

Message = dict[str, object]
Tool = dict[str, object]


@beartype.beartype
class SessionLogger:
    def __init__(self):
        ts = datetime.datetime.now().strftime("%Y%m%d-%H%M%S")
        self.dir = _LOG_BASE / ts
        self.dir.mkdir(parents=True, exist_ok=True)
        self._idx = 1

    def log(self, msg: Message) -> None:
        fname = f"{self._idx:02d}.{msg['role']}"
        # content can be None for tool-only assistant msgs
        self.dir.joinpath(fname).write_text(msg["content"] or "")
        self._idx += 1


@beartype.beartype
class Conversation:
    _model: str
    _api_key: str
    _msgs: list[Message]
    _logger: SessionLogger

    def __init__(self, *, model: str, api_key: str):
        self._model = model
        self._api_key = api_key
        self._msgs = []
        self._logger = SessionLogger()

    # Public API
    def system(self, content: str):
        self._push({"role": "system", "content": content})

    def user(self, content: str):
        self._push({"role": "user", "content": content})

    def tool(self, content: str, *, tool_call_id: str):
        self._push({"role": "tool", "content": content, "tool_call_id": tool_call_id})

    def send(self, *, tools: list[Tool] | None = None):
        resp = litellm.completion(
            model=self._model, messages=self._msgs, tools=tools, api_key=self._api_key
        )
        msg = resp.choices[0].message
        self._push({
            "role": "assistant",
            "content": msg.content or "",
            "tool_calls": msg.tool_calls,
        })
        return msg

    def get_costs(self) -> tuple[int, float]:
        usd_per_tok = litellm.model_cost[self._model]["input_cost_per_token"]
        toks_per_msg = [
            litellm.token_counter(model=self._model, messages=[m]) for m in self._msgs
        ]
        usd_per_msg = [usd_per_tok * toks for toks in toks_per_msg]
        usd_total = sum(usd_per_msg)
        toks_total = sum(toks_per_msg)
        return toks_total, usd_total

    # Private API
    def _push(self, msg: Message):
        self._msgs.append(msg)
        self._logger.log(msg)

>>>> prompt.j2
You are **shhelp**, a terse yet precise terminal guru.  
Think, plan and act autonomously until the task is solved, then yield a final answer for the user.

Keep the conversation open; do **not** finish until the userâ€™s request is fully satisfied.

If youâ€™re missing information, call a tool instead of hallucinating.  
Prefer **one tool call â†’ reflect â†’ next tool**; avoid blind chains.

Before each tool call:  

1. Write a short markdown bullet-list plan.  
2. State *why* the selected tool is needed.  

After each call: reflect on the output and decide next action.

Always warn before any command that writes or deletes.
Flag actions needing sudo.
If you can't solve, ask a clarifying question; never invent data.

## Style

- Use Markdown formatting in your responses
- ALWAYS place commands (both command blocks and single commands) and literal text lines in a fenced markdown block, with no prefix like $ or #, so that the user can easily copy the line, and so it's displayed correctly in markdown
- Include comments with # for complex commands
- Keep responses under 10 lines unless complexity requires more
- Use bold **text** only for warnings about dangerous operations
- Break down complex solutions into clear steps


## Environment

* system: {{ system }}
* shell: {{ shell }}
* aliases: {{ aliases }}
* cwd: {{ active_pane.cwd }}

{% if context %}

## Active Pane

* cwd: {{ active_pane.cwd }}

```
{{ active_pane.history }}
```

{% endif %}

{# ## Other Panes #}
{# {% for pane in panes %} #}
{# ### Pane {{ pane.id }} #}
{# * cwd: {{ pane.cwd }} #}
{# ``` #}
{# {{ pane.history }} #}
{# ``` #}
{# {% endfor %} #}

>>>> templating.py
"""
Lightweight Jinja2 alternative.

* *literal text*: everything not inside tags (unchanged)
* *variable*: `{{ expr }}` (any valid Python eval in the provided context; output str(expr))
* *for loops*: `{% for x in seq %} ... {% endfor %}` (nested allowed)
* *comment*: `{# ... #}` (discarded)
* *escaping*: `{{{` renders `{{`; raw block not supported

# Grammar (PEG / EBNF-ish)

document ::= segment* ;

segment ::= escaped_open | variable | for_loop | comment | text ;

escaped_open ::= "{{{"  # emits literal "{{"

variable ::= "{{"  WS?  expression  WS?  "}}" ;

for_loop        ::= "{%"  WS?  "for"  WS  identifier  WS  "in"
                        WS  expression  WS?  "%}"
                        segment*
                        "{%"  WS?  "endfor"  WS?  "%}"         ;

comment         ::= "{#"  (!"#}" .)*  "#}"                     # discarded

text ::= (!"{{{" !"{{" !"{%" !"{#" .)+ ;

identifier      ::= [A-Za-z_][A-Za-z_0-9]*                     ;

expression      ::= (!"}}" .)+                                 # handed to Python eval

WS              ::= [ \t\r\n]+                                 ;

"""

import collections.abc
import dataclasses
import pathlib

import beartype


@beartype.beartype
class Template:
    """Tiny subset-of-Jinja renderer.

    Parameters
    ----------
    path_or_str :
        Either raw template text or a filesystem path.
    """

    def __init__(self, path_or_str: str | pathlib.Path):
        if isinstance(path_or_str, pathlib.Path):
            txt = path_or_str.read_text() if path_or_str.exists() else str(path_or_str)
        else:
            path = pathlib.Path(path_or_str)
            txt = path.read_text() if path.exists() else path_or_str

        self._ast = Parser(lex(txt)).parse()

    def render(self, **kwargs) -> str:
        return "".join(n.render(dict(kwargs)) for n in self._ast)


# lexer


TOK_OPEN_VAR = "{{"
TOK_OPEN_STMT = "{%"
TOK_OPEN_COMM = "{#"
TOK_CLOSE_VAR = "}}"
TOK_CLOSE_STMT = "%}"
TOK_CLOSE_COMM = "#}"


@dataclasses.dataclass(frozen=True)
class Token:
    typ: str
    text: str


@beartype.beartype
def lex(src: str) -> collections.abc.Iterator[Token]:
    i, n = 0, len(src)
    while i < n:
        if src.startswith("{{{", i):  # escape
            yield Token("TEXT", "{{")
            i += 3
            continue

        if src.startswith(TOK_OPEN_VAR, i):
            j = src.find(TOK_CLOSE_VAR, i + 2)
            if j == -1:
                raise SyntaxError("unclosed {{")
            yield Token("VAR", src[i + 2 : j])
            i = j + 2
        elif src.startswith(TOK_OPEN_STMT, i):
            j = src.find(TOK_CLOSE_STMT, i + 2)
            if j == -1:
                raise SyntaxError("unclosed {%")
            yield Token("STMT", src[i + 2 : j].strip())
            i = j + 2
        elif src.startswith(TOK_OPEN_COMM, i):
            j = src.find(TOK_CLOSE_COMM, i + 2)
            if j == -1:
                raise SyntaxError("unclosed {#")
            i = j + 2  # discard
        else:  # literal
            j = src.find("{", i)
            yield Token("TEXT", src[i : j if j != -1 else n])
            i = j if j != -1 else n
    yield Token("EOF", "")


@beartype.beartype
class Node:
    # base class
    def render(self, ctx: dict[str, object]) -> str:
        raise NotImplementedError


@beartype.beartype
@dataclasses.dataclass(frozen=True)
class Text(Node):
    val: str

    def render(self, ctx):
        return self.val


@beartype.beartype
@dataclasses.dataclass(frozen=True)
class Var(Node):
    expr: str

    def render(self, ctx):
        return str(eval(self.expr, {}, ctx))


@beartype.beartype
@dataclasses.dataclass(frozen=True)
class If(Node):
    cond: str
    body: collections.abc.Sequence[Node]

    def render(self, ctx: dict[str, object]) -> str:
        if eval(self.cond, {}, ctx):
            return self.body.render(ctx)
        return ""


@beartype.beartype
@dataclasses.dataclass(frozen=True)
class For(Node):
    var: str
    seq: str
    body: collections.abc.Sequence[Node]

    def render(self, ctx):
        out = []
        for item in eval(self.seq, {}, ctx):
            ctx[self.var] = item
            out.append("".join(n.render(ctx) for n in self.body))
        return "".join(out)


@beartype.beartype
class TokenStream:
    def __init__(self, objs: collections.abc.Iterable[Token]):
        self.it = iter(objs)
        self.buffer = []
        self.position = -1
        self.advance()  # Load the first item

    def advance(self) -> Token:
        try:
            if self.position < len(self.buffer) - 1:
                self.position += 1
                return self.buffer[self.position]
            else:
                item = next(self.it)
                self.buffer.append(item)
                self.position += 1
                return item
        except StopIteration:
            return Token("EOF", "")  # Assuming Token is the expected type

    def peek(self) -> Token:
        if self.position >= len(self.buffer) - 1:
            try:
                self.buffer.append(next(self.it))
            except StopIteration:
                return Token("EOF", "")  # Assuming Token is the expected type
        return self.buffer[self.position + 1]

    def prev(self) -> Token:
        if self.position > 0:
            self.position -= 1
            return self.buffer[self.position]
        raise IndexError("Cannot go back before the start of the stream")

    def at_end(self) -> bool:
        return self.position >= len(self.buffer) - 1 and self.peek().typ == "EOF"

    def match(self, *types: str) -> bool:
        # Match any of the types and consume that token.
        if self.peek().typ in types:
            self.advance()
            return True
        return False


@beartype.beartype
class Parser:
    def __init__(self, tokens: collections.abc.Iterable[Token]):
        self.tokens = TokenStream(tokens)

    def match(self, *types: str) -> bool:
        if self.tokens.peek().typ in types:
            self.tokens.advance()
            return True
        return False

    def parse(self) -> list[Node]:
        nodes = []
        while not self.tokens.at_end():
            nodes.append(self._segment())
        return nodes

    def _segment(self) -> Node:
        if self.tokens.match("TEXT"):
            return self._text()
        elif self.tokens.match("VAR"):
            return self._var()
        else:
            breakpoint()

    def _text(self) -> Text:
        return Text(self.tokens.prev().text)

    def _var(self) -> Var:
        breakpoint()

    def _parse_if(self):
        _, cond = self.cur.text.split(None, 2)  # "if cond"
        self._next()
        body = self.parse()
        breakpoint()
        if self.cur.text != "endif":
            raise SyntaxError("missing endif")
        self._next()
        return If(cond, body)

    def _parse_for(self):
        _, var, _, seq = self.cur.text.split(None, 3)  # "for x in seq"
        self._next()
        body = self.parse()
        if self.cur.text != "endfor":
            raise SyntaxError("missing endfor")
        self._next()
        return For(var, seq, body)

>>>> test_e2e.py
from pathlib import Path


def _write_script(tmp_path: Path) -> Path:
    script = tmp_path / "shh"
    script.write_text("from shhelp.cli import main\nif __name__ == '__main__': main()")
    script.chmod(0o755)
    return script


def test_help(script_runner, tmp_path):
    """
    Check that help works.
    """
    script = _write_script(tmp_path)
    script_runner.run(
        [str(script), "-h"],
        env={"SHHELP_API_KEY": "DEADBEEF"},
        cwd=tmp_path,
        check=True,
    )

    script_runner.run(
        [str(script), "--help"],
        env={"SHHELP_API_KEY": "DEADBEEF"},
        cwd=tmp_path,
        check=True,
    )


def test_non_function_calling_model_fails(script_runner, tmp_path):
    """
    Spawn the real `shhelp` command and assert non-zero exit plus error text when a model lacking function-calling is requested.
    """
    script = _write_script(tmp_path)
    result = script_runner.run(
        [
            str(script),
            "how do I do nothing?",
            "--cfg.model",
            "ollama/llama2",
        ],
        env={"SHHELP_API_KEY": "DEADBEEF"},
        cwd=tmp_path,
    )

    assert result.returncode != 0

>>>> test_lex.py
import pytest

from .templating import Token, lex


def toks(src):
    """Helper â†’ materialise iterator minus trailing EOF for brevity."""
    ts = list(lex(src))
    assert ts[-1] == Token("EOF", "")
    return ts[:-1]


def test_text_only():
    assert toks("hello") == [Token("TEXT", "hello")]


def test_mixed_text_and_var():
    src = "hi {{ name }}."
    expect = [
        Token("TEXT", "hi "),
        Token("VAR", " name "),
        Token("TEXT", "."),
    ]
    assert toks(src) == expect


def test_for_stmt_tokens():
    src = "{% for x in seq %}body{% endfor %}"
    expect = [
        Token("STMT", "for x in seq"),
        Token("TEXT", "body"),
        Token("STMT", "endfor"),
    ]
    assert toks(src) == expect


def test_comment_elided():
    src = "a{# skip #}b"
    assert toks(src) == [Token("TEXT", "a"), Token("TEXT", "b")]


def test_triple_brace_escape():
    src = "{{{ not_var }}"
    # lexer should output literal '{{' then the rest as text
    assert toks(src)[0] == Token("TEXT", "{{")


def test_unclosed_var_raises():
    with pytest.raises(SyntaxError):
        list(lex("{{ unclosed"))

>>>> test_templating.py
import pytest

from .templating import Template

# literals


def test_literal_passthrough():
    src = "no tags here"
    assert Template(src).render() == "no tags here"


# variables


def test_variable_simple():
    out = Template("hello {{ name }}!").render(name="bob")
    assert out == "hello bob!"


def test_variable_expr_whitespace():
    src = "{{ 1 + 1 }}"
    assert Template(src).render() == "2"


def test_variable_undefined_raises():
    with pytest.raises(NameError):
        Template("{{ missing }}").render()


# comments


def test_comment_stripped():
    src = "a{# noisy #}b"
    assert Template(src).render() == "ab"


# escaping


def test_escape_triple_brace():
    src = "{{{ not_a_tag }}"
    assert Template(src).render() == "{{ not_a_tag }}"


# for-loops


def test_for_loop_basic():
    tpl = "{% for x in seq %}[{{ x }}]{% endfor %}"
    assert Template(tpl).render(seq=[1, 2, 3]) == "[1][2][3]"


def test_for_loop_nested_shadow():
    tpl = "{% for x in outer %}{% for x in inner %}{{ x }}{% endfor %}{% endfor %}"
    assert Template(tpl).render(outer=[0, 1], inner=["a"]) == "aa"

>>>> test_tooling.py
def test_all_tool_schemas():
    pass

>>>> tmux.py
import dataclasses
import os
import subprocess

import beartype


@beartype.beartype
@dataclasses.dataclass(frozen=True)
class Pane:
    """Represents a tmux pane.

    A tmux pane is a rectangular section of a tmux window where commands
    can be executed.

    Attributes:
        id: The unique identifier of the pane.
        cwd: The current working directory of the pane.
        active: Whether the pane is currently active.
        history: All lines of history in the pane.
    """

    id: str
    cwd: str
    active: bool
    history: str


@beartype.beartype
def get_panes() -> tuple[Pane, list[Pane]]:
    active_pane, other_panes = None, []
    active_id = os.getenv("TMUX_PANE")
    fmt = "#{pane_id},#{pane_current_path}"
    cmd = [
        "tmux",
        "list-panes",
        "-F",  # custom format
        fmt,
    ]
    for line in subprocess.check_output(cmd, text=True).splitlines():
        pane_id, cwd = line.split(",", 2)

        hist_cmd = [
            "tmux",
            "capture-pane",
            "-p",  # print to stdout
            "-J",  # join wrapped lines
            "-S",
            "-100",  # start 100 lines from bottom
            "-t",  # target this pane
            pane_id,
        ]
        history = subprocess.check_output(hist_cmd, text=True).strip()

        pane = Pane(id=pane_id, cwd=cwd, active=pane_id == active_id, history=history)
        if pane.active:
            active_pane = pane
        else:
            other_panes.append(pane)

    return active_pane, other_panes

>>>> tooling.py
import abc
import pathlib
import subprocess

import beartype


@beartype.beartype
class Tool(abc.ABC):
    """Describes a JSON-function tool plus its Python function."""

    name: str
    """snake-case identifier shown to the model"""
    description: str
    """natural langauage description of the tool."""
    parameters: dict[str, object]
    """valid JSON-schema describing arguments"""
    read_only: bool
    """Whether the function makes any changes to disk."""

    def __init_subclass__(cls):
        import jsonschema

        jsonschema.Draft202012Validator.check_schema(cls.parameters)
        _GLOBAL_REGISTRY[cls.name] = cls

    @classmethod
    def spec(cls):
        return {
            "type": "function",
            "function": {
                "name": cls.name,
                "description": cls.description,
                "parameters": cls.parameters,
                "strict": True,
            },
        }

    @abc.abstractmethod
    def run(self):
        raise NotImplementedError()

    @abc.abstractmethod
    def fmt(self):
        raise NotImplementedError()

    def __call__(self):
        return self.run()

    def __str__(self):
        return self.fmt()


_GLOBAL_REGISTRY: dict[str, type[Tool]] = {}


@beartype.beartype
def get_tools() -> list[type[Tool]]:
    return list(_GLOBAL_REGISTRY.values())


@beartype.beartype
def get_tool_specs() -> list[dict[str, object]]:
    return [tool.spec() for tool in get_tools()]


@beartype.beartype
def get_tool(name: str) -> type[Tool]:
    if name not in _GLOBAL_REGISTRY:
        raise ValueError(f"Tool {name} not registered.")
    return _GLOBAL_REGISTRY[name]


@beartype.beartype
class Grep(Tool):
    name = "ripgrep"
    description = (
        "Recursively look (grep) for REGEX in a path PATH. Output path:line:match."
    )
    read_only = True
    parameters = {
        "type": "object",
        "properties": {
            "regex": {
                "type": "string",
                "description": "Regex/text to search for",
            },
            "path": {"type": "string", "description": "Directory path (can be .)"},
        },
        "required": ["regex", "path"],
        "additionalProperties": False,
    }

    def __init__(self, *, regex: str, path: str):
        self.regex = regex
        self.path = pathlib.Path(path).expanduser().resolve()

        self._cmd = [
            "rg",
            "--line-number",
            "--color",
            "never",
            self.regex,
            str(self.path),
        ]

    def run(self) -> str:
        proc = subprocess.run(self._cmd, text=True, capture_output=True, timeout=15)
        if proc.returncode not in (0, 1):  # 1 = no matches
            raise RuntimeError(proc.stderr.strip())
        return proc.stdout

    def fmt(self) -> str:
        return " ".join(self._cmd)


@beartype.beartype
class Find(Tool):
    name = "find"
    description = "Find filepaths with a regular expression. Omit regex to list everything; omit path for CWD."
    parameters = {
        "type": "object",
        "properties": {
            "regex": {
                "type": ["string", "null"],
                "description": "Regex to match filenames; null or missing -> no filter",
            },
            "path": {
                "type": ["string", "null"],
                "description": "Directory to search; null or missing -> current dir",
            },
        },
        "required": ["regex", "path"],
        "additionalProperties": False,
    }
    read_only = True

    def __init__(self, *, regex: str | None = None, path: str | None = None):
        self._regex = regex
        self._path = pathlib.Path(path or ".").expanduser().resolve()

        if not self._path.is_dir():
            raise NotADirectoryError(self._path)

        cmd = ["fd", "--hidden", "--no-ignore", "--color", "never", "--full-path"]
        if regex:
            cmd.append(regex)
        cmd.append(str(self._path))

        self._cmd = cmd

    def run(self) -> str:
        proc = subprocess.run(self._cmd, text=True, capture_output=True, timeout=15)
        if proc.returncode not in (0, 1):  # 1 = no matches
            raise RuntimeError(proc.stderr.strip())
        return proc.stdout

    def fmt(self) -> str:
        return " ".join(self._cmd)

>>>> ui.py
import beartype
import prompt_toolkit as ptk

from . import unix

_STYLE = ptk.styles.Style.from_dict({
    "hl": "ansicyan",
    "cost": "ansigreen",
    "warn": "bold ansired",
    "prompt": "bold",
    "cmd": "italic ansiyellow",
})

_SESSION = ptk.PromptSession(
    history=ptk.history.FileHistory(str(unix.get_history_path())),
    style=_STYLE,
)

###########
# Generic #
###########


@beartype.beartype
def echo(html: str) -> None:
    """Write a line outside the input buffer (non-blocking)."""
    try:
        ptk.print_formatted_text(ptk.HTML(html), style=_STYLE)  # safe with PTK
    except Exception as err:
        breakpoint()
        print(err)


@beartype.beartype
def confirm(html: str, *, default_yes: bool = True) -> bool:
    yes_set = {"y", "yes"}
    if default_yes:
        yes_set.add("")
    try:
        ans = _SESSION.prompt(ptk.HTML(f"<prompt>{html}</prompt> ")).strip().lower()
    except EOFError:  # Ctrl-D
        return False

    return ans in yes_set


# shhelp-specific


@beartype.beartype
def confirm_next_request(tokens: int, cost_usd: float) -> bool:
    msg = (
        f"<highlight>Next request</highlight>: <cost>{tokens} tok  ${cost_usd:.2f}</cost>\n"
        "continue? [Y/n]:"
    )
    return confirm(msg)


@beartype.beartype
def ask_tool_skip_reason(tool: str) -> str:
    """Return the user's reason for denying a tool."""
    try:
        ans = _SESSION.prompt(ptk.HTML("<prompt>Why? </prompt> "))
    except EOFError:
        return ""
    return ans.strip()

>>>> unix.py
import os
import pathlib

import beartype


@beartype.beartype
def get_history_path() -> pathlib.Path:
    base = pathlib.Path(os.getenv("XDG_STATE_HOME", "~/.local/state")).expanduser()
    path = base / "shhelp" / "history"
    path.parent.mkdir(parents=True, exist_ok=True)
    return path

